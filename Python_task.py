{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57d6f7bd-ce8c-4e91-942f-8348e7f1089c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2.2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "print(pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb8097ba-205d-4e55-96b8-52c793186e61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2.2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "print(pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b68134da-f4a4-4924-8a5f-e0ea3b74ff99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/minhtam\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b695a6b0-c4a3-436b-bdc2-7cd03c3a37ea",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y1</th>\n",
       "      <th>y2</th>\n",
       "      <th>y3</th>\n",
       "      <th>y4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-20.0</td>\n",
       "      <td>39.778572</td>\n",
       "      <td>-40.078590</td>\n",
       "      <td>-20.214268</td>\n",
       "      <td>-0.324914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-19.9</td>\n",
       "      <td>39.604813</td>\n",
       "      <td>-39.784000</td>\n",
       "      <td>-20.070950</td>\n",
       "      <td>-0.058820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-19.8</td>\n",
       "      <td>40.099070</td>\n",
       "      <td>-40.018845</td>\n",
       "      <td>-19.906782</td>\n",
       "      <td>-0.451830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-19.7</td>\n",
       "      <td>40.151100</td>\n",
       "      <td>-39.518402</td>\n",
       "      <td>-19.389118</td>\n",
       "      <td>-0.612044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-19.6</td>\n",
       "      <td>39.795662</td>\n",
       "      <td>-39.360065</td>\n",
       "      <td>-19.815890</td>\n",
       "      <td>-0.306076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>19.5</td>\n",
       "      <td>-38.254158</td>\n",
       "      <td>39.661987</td>\n",
       "      <td>19.536741</td>\n",
       "      <td>0.695158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>19.6</td>\n",
       "      <td>-39.106945</td>\n",
       "      <td>39.067880</td>\n",
       "      <td>19.840752</td>\n",
       "      <td>0.638423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>19.7</td>\n",
       "      <td>-38.926495</td>\n",
       "      <td>40.211475</td>\n",
       "      <td>19.516634</td>\n",
       "      <td>0.109105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>19.8</td>\n",
       "      <td>-39.276672</td>\n",
       "      <td>40.038870</td>\n",
       "      <td>19.377943</td>\n",
       "      <td>0.189025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>19.9</td>\n",
       "      <td>-39.724934</td>\n",
       "      <td>40.558865</td>\n",
       "      <td>19.630678</td>\n",
       "      <td>0.513824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        x         y1         y2         y3        y4\n",
       "0   -20.0  39.778572 -40.078590 -20.214268 -0.324914\n",
       "1   -19.9  39.604813 -39.784000 -20.070950 -0.058820\n",
       "2   -19.8  40.099070 -40.018845 -19.906782 -0.451830\n",
       "3   -19.7  40.151100 -39.518402 -19.389118 -0.612044\n",
       "4   -19.6  39.795662 -39.360065 -19.815890 -0.306076\n",
       "..    ...        ...        ...        ...       ...\n",
       "395  19.5 -38.254158  39.661987  19.536741  0.695158\n",
       "396  19.6 -39.106945  39.067880  19.840752  0.638423\n",
       "397  19.7 -38.926495  40.211475  19.516634  0.109105\n",
       "398  19.8 -39.276672  40.038870  19.377943  0.189025\n",
       "399  19.9 -39.724934  40.558865  19.630678  0.513824\n",
       "\n",
       "[400 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('/Users/minhtam/Documents/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "78c22c96-e21d-4142-b1ec-4bece8ba318d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y1</th>\n",
       "      <th>y2</th>\n",
       "      <th>y3</th>\n",
       "      <th>y4</th>\n",
       "      <th>y5</th>\n",
       "      <th>y6</th>\n",
       "      <th>y7</th>\n",
       "      <th>y8</th>\n",
       "      <th>y9</th>\n",
       "      <th>...</th>\n",
       "      <th>y41</th>\n",
       "      <th>y42</th>\n",
       "      <th>y43</th>\n",
       "      <th>y44</th>\n",
       "      <th>y45</th>\n",
       "      <th>y46</th>\n",
       "      <th>y47</th>\n",
       "      <th>y48</th>\n",
       "      <th>y49</th>\n",
       "      <th>y50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-20.0</td>\n",
       "      <td>-0.912945</td>\n",
       "      <td>0.408082</td>\n",
       "      <td>9.087055</td>\n",
       "      <td>5.408082</td>\n",
       "      <td>-9.087055</td>\n",
       "      <td>0.912945</td>\n",
       "      <td>-0.839071</td>\n",
       "      <td>-0.850919</td>\n",
       "      <td>0.816164</td>\n",
       "      <td>...</td>\n",
       "      <td>-40.456474</td>\n",
       "      <td>40.204040</td>\n",
       "      <td>2.995732</td>\n",
       "      <td>-0.008333</td>\n",
       "      <td>12.995732</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>-5.298317</td>\n",
       "      <td>-0.186278</td>\n",
       "      <td>0.912945</td>\n",
       "      <td>0.396850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-19.9</td>\n",
       "      <td>-0.867644</td>\n",
       "      <td>0.497186</td>\n",
       "      <td>9.132356</td>\n",
       "      <td>5.497186</td>\n",
       "      <td>-9.132356</td>\n",
       "      <td>0.867644</td>\n",
       "      <td>-0.865213</td>\n",
       "      <td>0.168518</td>\n",
       "      <td>0.994372</td>\n",
       "      <td>...</td>\n",
       "      <td>-40.233820</td>\n",
       "      <td>40.048590</td>\n",
       "      <td>2.990720</td>\n",
       "      <td>-0.008340</td>\n",
       "      <td>12.990720</td>\n",
       "      <td>5.293305</td>\n",
       "      <td>-5.293305</td>\n",
       "      <td>-0.215690</td>\n",
       "      <td>0.867644</td>\n",
       "      <td>0.476954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-19.8</td>\n",
       "      <td>-0.813674</td>\n",
       "      <td>0.581322</td>\n",
       "      <td>9.186326</td>\n",
       "      <td>5.581322</td>\n",
       "      <td>-9.186326</td>\n",
       "      <td>0.813674</td>\n",
       "      <td>-0.889191</td>\n",
       "      <td>0.612391</td>\n",
       "      <td>1.162644</td>\n",
       "      <td>...</td>\n",
       "      <td>-40.006836</td>\n",
       "      <td>39.890660</td>\n",
       "      <td>2.985682</td>\n",
       "      <td>-0.008347</td>\n",
       "      <td>12.985682</td>\n",
       "      <td>5.288267</td>\n",
       "      <td>-5.288267</td>\n",
       "      <td>-0.236503</td>\n",
       "      <td>0.813674</td>\n",
       "      <td>0.549129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-19.7</td>\n",
       "      <td>-0.751573</td>\n",
       "      <td>0.659649</td>\n",
       "      <td>9.248426</td>\n",
       "      <td>5.659649</td>\n",
       "      <td>-9.248426</td>\n",
       "      <td>0.751573</td>\n",
       "      <td>-0.910947</td>\n",
       "      <td>-0.994669</td>\n",
       "      <td>1.319299</td>\n",
       "      <td>...</td>\n",
       "      <td>-39.775787</td>\n",
       "      <td>39.729824</td>\n",
       "      <td>2.980619</td>\n",
       "      <td>-0.008354</td>\n",
       "      <td>12.980619</td>\n",
       "      <td>5.283204</td>\n",
       "      <td>-5.283204</td>\n",
       "      <td>-0.247887</td>\n",
       "      <td>0.751573</td>\n",
       "      <td>0.612840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-19.6</td>\n",
       "      <td>-0.681964</td>\n",
       "      <td>0.731386</td>\n",
       "      <td>9.318036</td>\n",
       "      <td>5.731386</td>\n",
       "      <td>-9.318036</td>\n",
       "      <td>0.681964</td>\n",
       "      <td>-0.930426</td>\n",
       "      <td>0.774356</td>\n",
       "      <td>1.462772</td>\n",
       "      <td>...</td>\n",
       "      <td>-39.540980</td>\n",
       "      <td>39.565693</td>\n",
       "      <td>2.975530</td>\n",
       "      <td>-0.008361</td>\n",
       "      <td>12.975530</td>\n",
       "      <td>5.278115</td>\n",
       "      <td>-5.278115</td>\n",
       "      <td>-0.249389</td>\n",
       "      <td>0.681964</td>\n",
       "      <td>0.667902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>19.5</td>\n",
       "      <td>0.605540</td>\n",
       "      <td>0.795815</td>\n",
       "      <td>10.605540</td>\n",
       "      <td>5.795815</td>\n",
       "      <td>-10.605540</td>\n",
       "      <td>-0.605540</td>\n",
       "      <td>-0.947580</td>\n",
       "      <td>-0.117020</td>\n",
       "      <td>1.591630</td>\n",
       "      <td>...</td>\n",
       "      <td>39.302770</td>\n",
       "      <td>-38.602093</td>\n",
       "      <td>2.970414</td>\n",
       "      <td>-0.012422</td>\n",
       "      <td>12.970414</td>\n",
       "      <td>5.273000</td>\n",
       "      <td>-5.273000</td>\n",
       "      <td>0.240949</td>\n",
       "      <td>0.605540</td>\n",
       "      <td>0.714434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>19.6</td>\n",
       "      <td>0.681964</td>\n",
       "      <td>0.731386</td>\n",
       "      <td>10.681964</td>\n",
       "      <td>5.731386</td>\n",
       "      <td>-10.681964</td>\n",
       "      <td>-0.681964</td>\n",
       "      <td>-0.930426</td>\n",
       "      <td>0.774356</td>\n",
       "      <td>1.462772</td>\n",
       "      <td>...</td>\n",
       "      <td>39.540980</td>\n",
       "      <td>-38.834310</td>\n",
       "      <td>2.975530</td>\n",
       "      <td>-0.012438</td>\n",
       "      <td>12.975530</td>\n",
       "      <td>5.278115</td>\n",
       "      <td>-5.278115</td>\n",
       "      <td>0.249389</td>\n",
       "      <td>0.681964</td>\n",
       "      <td>0.667902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>19.7</td>\n",
       "      <td>0.751573</td>\n",
       "      <td>0.659649</td>\n",
       "      <td>10.751574</td>\n",
       "      <td>5.659649</td>\n",
       "      <td>-10.751574</td>\n",
       "      <td>-0.751573</td>\n",
       "      <td>-0.910947</td>\n",
       "      <td>-0.994669</td>\n",
       "      <td>1.319299</td>\n",
       "      <td>...</td>\n",
       "      <td>39.775787</td>\n",
       "      <td>-39.070175</td>\n",
       "      <td>2.980619</td>\n",
       "      <td>-0.012453</td>\n",
       "      <td>12.980619</td>\n",
       "      <td>5.283204</td>\n",
       "      <td>-5.283204</td>\n",
       "      <td>0.247887</td>\n",
       "      <td>0.751573</td>\n",
       "      <td>0.612840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>19.8</td>\n",
       "      <td>0.813674</td>\n",
       "      <td>0.581322</td>\n",
       "      <td>10.813674</td>\n",
       "      <td>5.581322</td>\n",
       "      <td>-10.813674</td>\n",
       "      <td>-0.813674</td>\n",
       "      <td>-0.889191</td>\n",
       "      <td>0.612391</td>\n",
       "      <td>1.162644</td>\n",
       "      <td>...</td>\n",
       "      <td>40.006836</td>\n",
       "      <td>-39.309338</td>\n",
       "      <td>2.985682</td>\n",
       "      <td>-0.012469</td>\n",
       "      <td>12.985682</td>\n",
       "      <td>5.288267</td>\n",
       "      <td>-5.288267</td>\n",
       "      <td>0.236503</td>\n",
       "      <td>0.813674</td>\n",
       "      <td>0.549129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>19.9</td>\n",
       "      <td>0.867644</td>\n",
       "      <td>0.497186</td>\n",
       "      <td>10.867644</td>\n",
       "      <td>5.497186</td>\n",
       "      <td>-10.867644</td>\n",
       "      <td>-0.867644</td>\n",
       "      <td>-0.865213</td>\n",
       "      <td>0.168518</td>\n",
       "      <td>0.994372</td>\n",
       "      <td>...</td>\n",
       "      <td>40.233820</td>\n",
       "      <td>-39.551407</td>\n",
       "      <td>2.990720</td>\n",
       "      <td>-0.012484</td>\n",
       "      <td>12.990720</td>\n",
       "      <td>5.293305</td>\n",
       "      <td>-5.293305</td>\n",
       "      <td>0.215690</td>\n",
       "      <td>0.867644</td>\n",
       "      <td>0.476954</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        x        y1        y2         y3        y4         y5        y6  \\\n",
       "0   -20.0 -0.912945  0.408082   9.087055  5.408082  -9.087055  0.912945   \n",
       "1   -19.9 -0.867644  0.497186   9.132356  5.497186  -9.132356  0.867644   \n",
       "2   -19.8 -0.813674  0.581322   9.186326  5.581322  -9.186326  0.813674   \n",
       "3   -19.7 -0.751573  0.659649   9.248426  5.659649  -9.248426  0.751573   \n",
       "4   -19.6 -0.681964  0.731386   9.318036  5.731386  -9.318036  0.681964   \n",
       "..    ...       ...       ...        ...       ...        ...       ...   \n",
       "395  19.5  0.605540  0.795815  10.605540  5.795815 -10.605540 -0.605540   \n",
       "396  19.6  0.681964  0.731386  10.681964  5.731386 -10.681964 -0.681964   \n",
       "397  19.7  0.751573  0.659649  10.751574  5.659649 -10.751574 -0.751573   \n",
       "398  19.8  0.813674  0.581322  10.813674  5.581322 -10.813674 -0.813674   \n",
       "399  19.9  0.867644  0.497186  10.867644  5.497186 -10.867644 -0.867644   \n",
       "\n",
       "           y7        y8        y9  ...        y41        y42       y43  \\\n",
       "0   -0.839071 -0.850919  0.816164  ... -40.456474  40.204040  2.995732   \n",
       "1   -0.865213  0.168518  0.994372  ... -40.233820  40.048590  2.990720   \n",
       "2   -0.889191  0.612391  1.162644  ... -40.006836  39.890660  2.985682   \n",
       "3   -0.910947 -0.994669  1.319299  ... -39.775787  39.729824  2.980619   \n",
       "4   -0.930426  0.774356  1.462772  ... -39.540980  39.565693  2.975530   \n",
       "..        ...       ...       ...  ...        ...        ...       ...   \n",
       "395 -0.947580 -0.117020  1.591630  ...  39.302770 -38.602093  2.970414   \n",
       "396 -0.930426  0.774356  1.462772  ...  39.540980 -38.834310  2.975530   \n",
       "397 -0.910947 -0.994669  1.319299  ...  39.775787 -39.070175  2.980619   \n",
       "398 -0.889191  0.612391  1.162644  ...  40.006836 -39.309338  2.985682   \n",
       "399 -0.865213  0.168518  0.994372  ...  40.233820 -39.551407  2.990720   \n",
       "\n",
       "          y44        y45       y46       y47       y48       y49       y50  \n",
       "0   -0.008333  12.995732  5.298317 -5.298317 -0.186278  0.912945  0.396850  \n",
       "1   -0.008340  12.990720  5.293305 -5.293305 -0.215690  0.867644  0.476954  \n",
       "2   -0.008347  12.985682  5.288267 -5.288267 -0.236503  0.813674  0.549129  \n",
       "3   -0.008354  12.980619  5.283204 -5.283204 -0.247887  0.751573  0.612840  \n",
       "4   -0.008361  12.975530  5.278115 -5.278115 -0.249389  0.681964  0.667902  \n",
       "..        ...        ...       ...       ...       ...       ...       ...  \n",
       "395 -0.012422  12.970414  5.273000 -5.273000  0.240949  0.605540  0.714434  \n",
       "396 -0.012438  12.975530  5.278115 -5.278115  0.249389  0.681964  0.667902  \n",
       "397 -0.012453  12.980619  5.283204 -5.283204  0.247887  0.751573  0.612840  \n",
       "398 -0.012469  12.985682  5.288267 -5.288267  0.236503  0.813674  0.549129  \n",
       "399 -0.012484  12.990720  5.293305 -5.293305  0.215690  0.867644  0.476954  \n",
       "\n",
       "[400 rows x 51 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('/Users/minhtam/Documents/ideal.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d6b5b736-0914-47f7-b4b7-2299f67368ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.5</td>\n",
       "      <td>34.161040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.3</td>\n",
       "      <td>1.215102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-8.7</td>\n",
       "      <td>-16.843908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-19.2</td>\n",
       "      <td>-37.170870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-11.0</td>\n",
       "      <td>-20.263054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>-1.9</td>\n",
       "      <td>-4.036904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>12.2</td>\n",
       "      <td>-0.010358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>16.5</td>\n",
       "      <td>-33.964134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-10.291622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>17.9</td>\n",
       "      <td>28.078455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       x          y\n",
       "0   17.5  34.161040\n",
       "1    0.3   1.215102\n",
       "2   -8.7 -16.843908\n",
       "3  -19.2 -37.170870\n",
       "4  -11.0 -20.263054\n",
       "..   ...        ...\n",
       "95  -1.9  -4.036904\n",
       "96  12.2  -0.010358\n",
       "97  16.5 -33.964134\n",
       "98   5.3 -10.291622\n",
       "99  17.9  28.078455\n",
       "\n",
       "[100 rows x 2 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('/Users/minhtam/Documents/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6a414d2a-b929-49ce-8663-feace51060f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "train_df = pd.read_csv('/Users/minhtam/Documents/train.csv')\n",
    "ideal_df = pd.read_csv('/Users/minhtam/Documents/ideal.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f5f63020-2cf9-465a-b97b-dbb5ae500f50",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_columns = ['y1', 'y2', 'y3', 'y4']\n",
    "ideal_columns = [col for col in ideal_df.columns if col != 'x']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "37b9e3ff-3a06-4e85-a6a9-df7f89066a3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Create a DataFrame to store the results\n",
    "mse_results = pd.DataFrame(index=train_columns, columns=ideal_columns)\n",
    "\n",
    "# Loop through each train_y and ideal_y\n",
    "for train_col in train_columns:\n",
    "    for ideal_col in ideal_columns:\n",
    "        # Calculate squared difference for each row\n",
    "        diff_squared = (train_df[train_col] - ideal_df[ideal_col]) ** 2\n",
    "        # Calculate the mean\n",
    "        mse = np.mean(diff_squared)\n",
    "        # Store in the results table\n",
    "        mse_results.at[train_col, ideal_col] = mse\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0006dc70-da4c-48dc-a1c3-f7f854fb1493",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y1</th>\n",
       "      <th>y2</th>\n",
       "      <th>y3</th>\n",
       "      <th>y4</th>\n",
       "      <th>y5</th>\n",
       "      <th>y6</th>\n",
       "      <th>y7</th>\n",
       "      <th>y8</th>\n",
       "      <th>y9</th>\n",
       "      <th>y10</th>\n",
       "      <th>...</th>\n",
       "      <th>y41</th>\n",
       "      <th>y42</th>\n",
       "      <th>y43</th>\n",
       "      <th>y44</th>\n",
       "      <th>y45</th>\n",
       "      <th>y46</th>\n",
       "      <th>y47</th>\n",
       "      <th>y48</th>\n",
       "      <th>y49</th>\n",
       "      <th>y50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>y1</th>\n",
       "      <td>531.472176</td>\n",
       "      <td>532.346369</td>\n",
       "      <td>629.273209</td>\n",
       "      <td>556.7258</td>\n",
       "      <td>636.494906</td>\n",
       "      <td>534.387233</td>\n",
       "      <td>533.158964</td>\n",
       "      <td>533.156887</td>\n",
       "      <td>533.272315</td>\n",
       "      <td>591.987478</td>\n",
       "      <td>...</td>\n",
       "      <td>2130.009336</td>\n",
       "      <td>0.085616</td>\n",
       "      <td>538.907326</td>\n",
       "      <td>532.386744</td>\n",
       "      <td>675.431262</td>\n",
       "      <td>552.619171</td>\n",
       "      <td>554.724046</td>\n",
       "      <td>532.816789</td>\n",
       "      <td>532.745277</td>\n",
       "      <td>532.295933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y2</th>\n",
       "      <td>534.268865</td>\n",
       "      <td>533.420559</td>\n",
       "      <td>636.107997</td>\n",
       "      <td>559.819042</td>\n",
       "      <td>630.439191</td>\n",
       "      <td>532.369617</td>\n",
       "      <td>533.197411</td>\n",
       "      <td>533.154353</td>\n",
       "      <td>535.03116</td>\n",
       "      <td>599.294135</td>\n",
       "      <td>...</td>\n",
       "      <td>0.089005</td>\n",
       "      <td>2132.330928</td>\n",
       "      <td>540.45432</td>\n",
       "      <td>532.881276</td>\n",
       "      <td>681.016358</td>\n",
       "      <td>555.095973</td>\n",
       "      <td>553.026318</td>\n",
       "      <td>532.515616</td>\n",
       "      <td>533.479678</td>\n",
       "      <td>533.304058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y3</th>\n",
       "      <td>134.514539</td>\n",
       "      <td>133.87607</td>\n",
       "      <td>235.501458</td>\n",
       "      <td>159.848446</td>\n",
       "      <td>232.010051</td>\n",
       "      <td>133.088264</td>\n",
       "      <td>133.757761</td>\n",
       "      <td>133.72256</td>\n",
       "      <td>135.460022</td>\n",
       "      <td>198.287319</td>\n",
       "      <td>...</td>\n",
       "      <td>133.263759</td>\n",
       "      <td>1199.988926</td>\n",
       "      <td>140.653496</td>\n",
       "      <td>133.337027</td>\n",
       "      <td>280.363319</td>\n",
       "      <td>155.098919</td>\n",
       "      <td>153.987693</td>\n",
       "      <td>133.169215</td>\n",
       "      <td>133.891079</td>\n",
       "      <td>133.759418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y4</th>\n",
       "      <td>0.552048</td>\n",
       "      <td>0.61401</td>\n",
       "      <td>100.253745</td>\n",
       "      <td>25.943774</td>\n",
       "      <td>100.850119</td>\n",
       "      <td>0.64311</td>\n",
       "      <td>0.614186</td>\n",
       "      <td>0.575769</td>\n",
       "      <td>2.139723</td>\n",
       "      <td>63.060304</td>\n",
       "      <td>...</td>\n",
       "      <td>532.085589</td>\n",
       "      <td>534.350997</td>\n",
       "      <td>7.124999</td>\n",
       "      <td>0.107257</td>\n",
       "      <td>145.5496</td>\n",
       "      <td>21.274489</td>\n",
       "      <td>21.404478</td>\n",
       "      <td>0.079909</td>\n",
       "      <td>0.580978</td>\n",
       "      <td>0.50013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            y1          y2          y3          y4          y5          y6  \\\n",
       "y1  531.472176  532.346369  629.273209    556.7258  636.494906  534.387233   \n",
       "y2  534.268865  533.420559  636.107997  559.819042  630.439191  532.369617   \n",
       "y3  134.514539   133.87607  235.501458  159.848446  232.010051  133.088264   \n",
       "y4    0.552048     0.61401  100.253745   25.943774  100.850119     0.64311   \n",
       "\n",
       "            y7          y8          y9         y10  ...          y41  \\\n",
       "y1  533.158964  533.156887  533.272315  591.987478  ...  2130.009336   \n",
       "y2  533.197411  533.154353   535.03116  599.294135  ...     0.089005   \n",
       "y3  133.757761   133.72256  135.460022  198.287319  ...   133.263759   \n",
       "y4    0.614186    0.575769    2.139723   63.060304  ...   532.085589   \n",
       "\n",
       "            y42         y43         y44         y45         y46         y47  \\\n",
       "y1     0.085616  538.907326  532.386744  675.431262  552.619171  554.724046   \n",
       "y2  2132.330928   540.45432  532.881276  681.016358  555.095973  553.026318   \n",
       "y3  1199.988926  140.653496  133.337027  280.363319  155.098919  153.987693   \n",
       "y4   534.350997    7.124999    0.107257    145.5496   21.274489   21.404478   \n",
       "\n",
       "           y48         y49         y50  \n",
       "y1  532.816789  532.745277  532.295933  \n",
       "y2  532.515616  533.479678  533.304058  \n",
       "y3  133.169215  133.891079  133.759418  \n",
       "y4    0.079909    0.580978     0.50013  \n",
       "\n",
       "[4 rows x 50 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mse_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b3e1b5a6-9455-41a2-944c-5071c4ab8b13",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse_results.to_csv('mse_results.csv')  # Lưu file csv vào thư mục hiện tại"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c89c6abf-ece2-4679-85cf-b42ec9b5f5f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "mse_results.to_csv('mse_results.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1bc6f2a2-2d93-4a8a-b684-0d9951410c80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<a href='mse_results.csv' target='_blank'>mse_results.csv</a><br>"
      ],
      "text/plain": [
       "/Users/minhtam/mse_results.csv"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import FileLink\n",
    "FileLink(r'mse_results.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4921618c-d25e-4c0f-9d9b-dedd73199e8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_fit_ideals = mse_results.idxmin(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "78f53abb-566e-4738-878c-b60deb0895d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_fit_mse = mse_results.min(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "57c9c272-6808-45b6-b2b8-ea9ab982a62a",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_fit_summary = pd.DataFrame({\n",
    "    \"train_function\": best_fit_ideals.index,        # y1 -> y4,...\n",
    "    \"best_ideal_function\": best_fit_ideals.values,  # y42, y41,...\n",
    "    \"min_mse\": best_fit_mse.values                  # Giá trị MSE nhỏ nhất tương ứng\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "790ce270-331a-4d71-9216-9d39b5937aa7",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_fit_ideals = mse_results.idxmin(axis=1)\n",
    "best_fit_mse = mse_results.min(axis=1)\n",
    "\n",
    "best_fit_summary = pd.DataFrame({\n",
    "    \"train_function\": best_fit_ideals.index,\n",
    "    \"best_ideal_function\": best_fit_ideals.values,\n",
    "    \"min_mse\": best_fit_mse.values\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "91292d8f-9250-429d-a4fa-a523a8872c1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train_function</th>\n",
       "      <th>best_ideal_function</th>\n",
       "      <th>min_mse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>y1</td>\n",
       "      <td>y42</td>\n",
       "      <td>0.085616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>y2</td>\n",
       "      <td>y41</td>\n",
       "      <td>0.089005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>y3</td>\n",
       "      <td>y11</td>\n",
       "      <td>0.074655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>y4</td>\n",
       "      <td>y48</td>\n",
       "      <td>0.079909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  train_function best_ideal_function   min_mse\n",
       "0             y1                 y42  0.085616\n",
       "1             y2                 y41  0.089005\n",
       "2             y3                 y11  0.074655\n",
       "3             y4                 y48  0.079909"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_fit_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8b308cff-aa80-4c72-a62f-819f6778080d",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_deviation_train_vs_ideal = {}\n",
    "\n",
    "for train_col, ideal_col in zip(best_fit_ideals.index, best_fit_ideals.values):\n",
    "    max_dev = np.max(np.abs(train_df[train_col] - ideal_df[ideal_col]))  # Maximum deviation\n",
    "    max_deviation_train_vs_ideal[ideal_col] = max_dev\n",
    "\n",
    "    # Add to the result table\n",
    "    best_fit_summary.loc[best_fit_summary[\"train_function\"] == train_col, \"max_deviation\"] = max_dev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7a24364a-f256-406c-815f-30ebdcd640ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'y42': 0.4959680000000013,\n",
       " 'y41': 0.49770300000000134,\n",
       " 'y11': 0.4989360000000005,\n",
       " 'y48': 0.49974158999999996}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_deviation_train_vs_ideal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "83df99e2-3b60-4f63-816e-12f9e7e41272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 17.5, y = 34.16104\n",
      "x = 0.3, y = 1.2151024\n",
      "x = -8.7, y = -16.843908\n",
      "x = -19.2, y = -37.17087\n",
      "x = -11.0, y = -20.263054\n",
      "x = 0.8, y = 1.4264555\n",
      "x = 14.0, y = -0.06650608\n",
      "x = -10.4, y = -2.007094\n",
      "x = -15.0, y = -0.20536347\n",
      "x = 5.8, y = 10.711373\n",
      "x = -7.6, y = -39.4954\n",
      "x = -19.8, y = -19.915014\n",
      "x = 18.9, y = 19.193245\n",
      "x = 6.9, y = 7.8014545\n",
      "x = 8.8, y = -0.7260513\n",
      "x = -9.5, y = -9.652251\n",
      "x = 8.1, y = -16.659458\n",
      "x = 7.7, y = -14.40003\n",
      "x = 4.5, y = -0.8401146\n",
      "x = 10.7, y = 38.790028\n",
      "x = -8.8, y = 16.571745\n",
      "x = 11.7, y = 31.159376\n",
      "x = -15.4, y = 29.490164\n",
      "x = 13.9, y = 15.310406\n",
      "x = -17.9, y = 1.1692159\n",
      "x = -3.1, y = -2.7701359\n",
      "x = -10.1, y = -40.44977\n",
      "x = -11.8, y = 24.606413\n",
      "x = 18.8, y = 37.5234\n",
      "x = -14.3, y = -30.492392\n",
      "x = 6.3, y = 13.4726305\n",
      "x = -18.8, y = 13.410461\n",
      "x = 7.7, y = 15.392297\n",
      "x = -2.8, y = -3.2989988\n",
      "x = -8.2, y = -16.575344\n",
      "x = 2.8, y = -36.151726\n",
      "x = 14.1, y = 0.31000805\n",
      "x = -4.0, y = -8.339117\n",
      "x = 5.8, y = 11.520408\n",
      "x = 17.1, y = -34.927006\n",
      "x = 13.5, y = -21.734203\n",
      "x = 14.7, y = -0.27583703\n",
      "x = 13.7, y = 28.15797\n",
      "x = -7.9, y = -0.21800028\n",
      "x = -7.3, y = -9.224243\n",
      "x = -9.1, y = -8.293134\n",
      "x = 4.6, y = -7.905099\n",
      "x = 19.7, y = 38.955273\n",
      "x = 17.6, y = -35.10534\n",
      "x = -4.5, y = -9.88685\n",
      "x = -5.7, y = 2.4492908\n",
      "x = 13.6, y = 12.65079\n",
      "x = -1.0, y = 38.057026\n",
      "x = 3.0, y = -0.24295843\n",
      "x = -18.3, y = -19.014248\n",
      "x = 7.7, y = 7.778326\n",
      "x = -12.4, y = 1.2345738\n",
      "x = 11.7, y = 11.846094\n",
      "x = -2.8, y = -2.6560864\n",
      "x = -9.7, y = 18.183699\n",
      "x = 10.4, y = 10.410377\n",
      "x = -19.1, y = -38.155376\n",
      "x = -14.7, y = -23.71317\n",
      "x = 9.2, y = 7.5970726\n",
      "x = -9.6, y = -10.995601\n",
      "x = -3.2, y = 7.2523284\n",
      "x = -10.6, y = 19.67348\n",
      "x = -12.5, y = 25.675346\n",
      "x = -5.3, y = -4.3722925\n",
      "x = 14.6, y = -0.677509\n",
      "x = -16.8, y = -34.480774\n",
      "x = 2.842171e-13, y = 1.0261426\n",
      "x = 5.7, y = 31.600712\n",
      "x = -4.6, y = -0.4953994\n",
      "x = -15.0, y = -13.989205\n",
      "x = -1.3, y = 17.94832\n",
      "x = -4.6, y = -3.321962\n",
      "x = -8.2, y = 15.767493\n",
      "x = 13.3, y = 27.148037\n",
      "x = 18.2, y = 18.535152\n",
      "x = -10.0, y = 18.979424\n",
      "x = -12.0, y = 0.670648\n",
      "x = 18.7, y = 0.8322721\n",
      "x = -20.0, y = -19.28497\n",
      "x = 12.5, y = 23.7267\n",
      "x = -19.3, y = -38.458572\n",
      "x = 16.3, y = 16.863394\n",
      "x = 6.7, y = 6.232807\n",
      "x = 9.8, y = -21.007133\n",
      "x = 10.1, y = 20.669428\n",
      "x = 13.6, y = 28.536507\n",
      "x = -14.4, y = -15.698657\n",
      "x = -9.1, y = -31.648926\n",
      "x = 16.6, y = -33.41535\n",
      "x = -12.4, y = 26.599438\n",
      "x = -1.9, y = -4.0369043\n",
      "x = 12.2, y = -0.010358215\n",
      "x = 16.5, y = -33.964134\n",
      "x = 5.3, y = -10.291622\n",
      "x = 17.9, y = 28.078455\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Đọc test data\n",
    "test_df = pd.read_csv('/Users/minhtam/Documents/test.csv')\n",
    "\n",
    "# Duyệt qua từng dòng\n",
    "for _, row in test_df.iterrows():\n",
    "    x_val = row[\"x\"]\n",
    "    y_val = row[\"y\"]\n",
    "    print(f\"x = {x_val}, y = {y_val}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e3663506-127c-4a97-a707-4d3bd4cda803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 17.5, y = 34.16104\n",
      "x = 0.3, y = 1.2151024\n",
      "x = -8.7, y = -16.843908\n",
      "x = -19.2, y = -37.17087\n",
      "x = -11.0, y = -20.263054\n",
      "x = 0.8, y = 1.4264555\n",
      "x = 14.0, y = -0.06650608\n",
      "x = -10.4, y = -2.007094\n",
      "x = -15.0, y = -0.20536347\n",
      "x = 5.8, y = 10.711373\n",
      "x = -7.6, y = -39.4954\n",
      "x = -19.8, y = -19.915014\n",
      "x = 18.9, y = 19.193245\n",
      "x = 6.9, y = 7.8014545\n",
      "x = 8.8, y = -0.7260513\n",
      "x = -9.5, y = -9.652251\n",
      "x = 8.1, y = -16.659458\n",
      "x = 7.7, y = -14.40003\n",
      "x = 4.5, y = -0.8401146\n",
      "x = 10.7, y = 38.790028\n",
      "x = -8.8, y = 16.571745\n",
      "x = 11.7, y = 31.159376\n",
      "x = -15.4, y = 29.490164\n",
      "x = 13.9, y = 15.310406\n",
      "x = -17.9, y = 1.1692159\n",
      "x = -3.1, y = -2.7701359\n",
      "x = -10.1, y = -40.44977\n",
      "x = -11.8, y = 24.606413\n",
      "x = 18.8, y = 37.5234\n",
      "x = -14.3, y = -30.492392\n",
      "x = 6.3, y = 13.4726305\n",
      "x = -18.8, y = 13.410461\n",
      "x = 7.7, y = 15.392297\n",
      "x = -2.8, y = -3.2989988\n",
      "x = -8.2, y = -16.575344\n",
      "x = 2.8, y = -36.151726\n",
      "x = 14.1, y = 0.31000805\n",
      "x = -4.0, y = -8.339117\n",
      "x = 5.8, y = 11.520408\n",
      "x = 17.1, y = -34.927006\n",
      "x = 13.5, y = -21.734203\n",
      "x = 14.7, y = -0.27583703\n",
      "x = 13.7, y = 28.15797\n",
      "x = -7.9, y = -0.21800028\n",
      "x = -7.3, y = -9.224243\n",
      "x = -9.1, y = -8.293134\n",
      "x = 4.6, y = -7.905099\n",
      "x = 19.7, y = 38.955273\n",
      "x = 17.6, y = -35.10534\n",
      "x = -4.5, y = -9.88685\n",
      "x = -5.7, y = 2.4492908\n",
      "x = 13.6, y = 12.65079\n",
      "x = -1.0, y = 38.057026\n",
      "x = 3.0, y = -0.24295843\n",
      "x = -18.3, y = -19.014248\n",
      "x = 7.7, y = 7.778326\n",
      "x = -12.4, y = 1.2345738\n",
      "x = 11.7, y = 11.846094\n",
      "x = -2.8, y = -2.6560864\n",
      "x = -9.7, y = 18.183699\n",
      "x = 10.4, y = 10.410377\n",
      "x = -19.1, y = -38.155376\n",
      "x = -14.7, y = -23.71317\n",
      "x = 9.2, y = 7.5970726\n",
      "x = -9.6, y = -10.995601\n",
      "x = -3.2, y = 7.2523284\n",
      "x = -10.6, y = 19.67348\n",
      "x = -12.5, y = 25.675346\n",
      "x = -5.3, y = -4.3722925\n",
      "x = 14.6, y = -0.677509\n",
      "x = -16.8, y = -34.480774\n",
      "x = 2.842171e-13, y = 1.0261426\n",
      "x = 5.7, y = 31.600712\n",
      "x = -4.6, y = -0.4953994\n",
      "x = -15.0, y = -13.989205\n",
      "x = -1.3, y = 17.94832\n",
      "x = -4.6, y = -3.321962\n",
      "x = -8.2, y = 15.767493\n",
      "x = 13.3, y = 27.148037\n",
      "x = 18.2, y = 18.535152\n",
      "x = -10.0, y = 18.979424\n",
      "x = -12.0, y = 0.670648\n",
      "x = 18.7, y = 0.8322721\n",
      "x = -20.0, y = -19.28497\n",
      "x = 12.5, y = 23.7267\n",
      "x = -19.3, y = -38.458572\n",
      "x = 16.3, y = 16.863394\n",
      "x = 6.7, y = 6.232807\n",
      "x = 9.8, y = -21.007133\n",
      "x = 10.1, y = 20.669428\n",
      "x = 13.6, y = 28.536507\n",
      "x = -14.4, y = -15.698657\n",
      "x = -9.1, y = -31.648926\n",
      "x = 16.6, y = -33.41535\n",
      "x = -12.4, y = 26.599438\n",
      "x = -1.9, y = -4.0369043\n",
      "x = 12.2, y = -0.010358215\n",
      "x = 16.5, y = -33.964134\n",
      "x = 5.3, y = -10.291622\n",
      "x = 17.9, y = 28.078455\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read test data\n",
    "test_df = pd.read_csv('/Users/minhtam/Documents/test.csv')\n",
    "\n",
    "# Iterate over each row\n",
    "for _, row in test_df.iterrows():\n",
    "    x_val = row[\"x\"]\n",
    "    y_val = row[\"y\"]\n",
    "    print(f\"x = {x_val}, y = {y_val}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ead0c7b0-42a9-4cf7-a7dc-f04664898f10",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read test data\n",
    "test_df = pd.read_csv('/Users/minhtam/Documents/test.csv')\n",
    "\n",
    "# Save to CSV\n",
    "test_df.to_csv('output.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "340c8dc9-0c8e-411f-8c50-c028440c5c1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.5</td>\n",
       "      <td>34.161040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.3</td>\n",
       "      <td>1.215102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-8.7</td>\n",
       "      <td>-16.843908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-19.2</td>\n",
       "      <td>-37.170870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-11.0</td>\n",
       "      <td>-20.263054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>-1.9</td>\n",
       "      <td>-4.036904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>12.2</td>\n",
       "      <td>-0.010358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>16.5</td>\n",
       "      <td>-33.964134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>5.3</td>\n",
       "      <td>-10.291622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>17.9</td>\n",
       "      <td>28.078455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       x          y\n",
       "0   17.5  34.161040\n",
       "1    0.3   1.215102\n",
       "2   -8.7 -16.843908\n",
       "3  -19.2 -37.170870\n",
       "4  -11.0 -20.263054\n",
       "..   ...        ...\n",
       "95  -1.9  -4.036904\n",
       "96  12.2  -0.010358\n",
       "97  16.5 -33.964134\n",
       "98   5.3 -10.291622\n",
       "99  17.9  28.078455\n",
       "\n",
       "[100 rows x 2 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "073424ee-41f3-4303-bd6a-f55954b85624",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<a href='output.csv' target='_blank'>output.csv</a><br>"
      ],
      "text/plain": [
       "/Users/minhtam/output.csv"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import FileLink\n",
    "FileLink('output.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "47247b66-fe91-4a0f-90c0-33489135d171",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "for i, row in best_fit_summary.iterrows():\n",
    "    train_y = row[\"train_function\"]\n",
    "    ideal_y = row[\"best_ideal_function\"]\n",
    "\n",
    "    plt.plot(train_df[\"x\"], train_df[train_y], label=f\"Train {train_y}\", linestyle=\"dashed\")\n",
    "    plt.plot(ideal_df[\"x\"], ideal_df[ideal_y], label=f\"Ideal {ideal_y}\")\n",
    "\n",
    "plt.title(\"Comparison of Selected Train and Ideal Functions\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a9f4555-72e6-42e8-9145-dbf448038e44",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
