{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb3169a0-018e-4734-bf7d-76b47a7e1541",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import sqrt\n",
    "\n",
    "# Tính MSE giữa 2 mảng y\n",
    "def compute_mse(y_true, y_pred):\n",
    "    return np.mean((y_true - y_pred) ** 2)\n",
    "\n",
    "# Kiểm tra điểm test có nằm trong ngưỡng cho phép không\n",
    "def is_within_threshold(y_test, y_ideal, max_dev):\n",
    "    return abs(y_test - y_ideal) <= sqrt(2) * max_dev\n",
    "\n",
    "# Tìm ideal function phù hợp nhất\n",
    "def find_best_ideal(train_y, list_ideal_y):\n",
    "    return min(list_ideal_y, key=lambda ideal_y: compute_mse(train_y, ideal_y))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b078c06e-1ae6-43b8-8ca4-91f3df12979e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2.2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "print(pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "050d74b8-2923-44ca-a58b-5f67b4f3d7e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/minhtam\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "44a350dd-3ecd-46c1-b289-c6a4212a1338",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y1</th>\n",
       "      <th>y2</th>\n",
       "      <th>y3</th>\n",
       "      <th>y4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-20.0</td>\n",
       "      <td>39.778572</td>\n",
       "      <td>-40.078590</td>\n",
       "      <td>-20.214268</td>\n",
       "      <td>-0.324914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-19.9</td>\n",
       "      <td>39.604813</td>\n",
       "      <td>-39.784000</td>\n",
       "      <td>-20.070950</td>\n",
       "      <td>-0.058820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-19.8</td>\n",
       "      <td>40.099070</td>\n",
       "      <td>-40.018845</td>\n",
       "      <td>-19.906782</td>\n",
       "      <td>-0.451830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-19.7</td>\n",
       "      <td>40.151100</td>\n",
       "      <td>-39.518402</td>\n",
       "      <td>-19.389118</td>\n",
       "      <td>-0.612044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-19.6</td>\n",
       "      <td>39.795662</td>\n",
       "      <td>-39.360065</td>\n",
       "      <td>-19.815890</td>\n",
       "      <td>-0.306076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>19.5</td>\n",
       "      <td>-38.254158</td>\n",
       "      <td>39.661987</td>\n",
       "      <td>19.536741</td>\n",
       "      <td>0.695158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>19.6</td>\n",
       "      <td>-39.106945</td>\n",
       "      <td>39.067880</td>\n",
       "      <td>19.840752</td>\n",
       "      <td>0.638423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>19.7</td>\n",
       "      <td>-38.926495</td>\n",
       "      <td>40.211475</td>\n",
       "      <td>19.516634</td>\n",
       "      <td>0.109105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>19.8</td>\n",
       "      <td>-39.276672</td>\n",
       "      <td>40.038870</td>\n",
       "      <td>19.377943</td>\n",
       "      <td>0.189025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>19.9</td>\n",
       "      <td>-39.724934</td>\n",
       "      <td>40.558865</td>\n",
       "      <td>19.630678</td>\n",
       "      <td>0.513824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        x         y1         y2         y3        y4\n",
       "0   -20.0  39.778572 -40.078590 -20.214268 -0.324914\n",
       "1   -19.9  39.604813 -39.784000 -20.070950 -0.058820\n",
       "2   -19.8  40.099070 -40.018845 -19.906782 -0.451830\n",
       "3   -19.7  40.151100 -39.518402 -19.389118 -0.612044\n",
       "4   -19.6  39.795662 -39.360065 -19.815890 -0.306076\n",
       "..    ...        ...        ...        ...       ...\n",
       "395  19.5 -38.254158  39.661987  19.536741  0.695158\n",
       "396  19.6 -39.106945  39.067880  19.840752  0.638423\n",
       "397  19.7 -38.926495  40.211475  19.516634  0.109105\n",
       "398  19.8 -39.276672  40.038870  19.377943  0.189025\n",
       "399  19.9 -39.724934  40.558865  19.630678  0.513824\n",
       "\n",
       "[400 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('/Users/minhtam/Documents/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "77f1711e-f8e7-4572-9f50-0c64f337295c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import sqrt\n",
    "\n",
    "# Calculate the MSE between 2 arrays y\n",
    "def compute_mse(y_true, y_pred):\n",
    "    \"\"\"\n",
    "    Compute the Mean Squared Error between the true and predicted values.\n",
    "    \"\"\"\n",
    "    return np.mean((y_true - y_pred) ** 2)\n",
    "\n",
    "# Check if the test point is within the allowed threshold\n",
    "def is_within_threshold(y_test, y_ideal, max_dev):\n",
    "    \"\"\"\n",
    "    Check if test value is within threshold (max_dev) compared to ideal value\n",
    "    \"\"\"\n",
    "    return abs(y_test - y_ideal) <= sqrt(2) * max_dev\n",
    "\n",
    "# Find the best-fitting ideal function\n",
    "    \"\"\"\n",
    "    Find array in ideal_list with minimal MSE compared with train_y\n",
    "    \"\"\"\n",
    "def find_best_ideal(train_y, list_ideal_y):\n",
    "    return min(list_ideal_y, key=lambda ideal_y: compute_mse(train_y, ideal_y))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "30b6a7bd-e159-4d19-8667-1e09aa5d97a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "....\n",
      "----------------------------------------------------------------------\n",
      "Ran 4 tests in 0.013s\n",
      "\n",
      "OK\n"
     ]
    }
   ],
   "source": [
    "import unittest\n",
    "import numpy as np\n",
    "\n",
    "class TestMappingLogic(unittest.TestCase):\n",
    "    \"\"\"\n",
    "    Unit tests for functions related to MSE calculation,\n",
    "    threshold checking, and selecting the best ideal function.\n",
    "    \"\"\"\n",
    "\n",
    "    def test_mse(self):\n",
    "        \"\"\"\n",
    "        Test whether compute_mse correctly calculates the Mean Squared Error (MSE)\n",
    "        between two small numeric arrays with known values.\n",
    "        \"\"\"\n",
    "        y_true = np.array([1, 2, 3])\n",
    "        y_pred = np.array([1.1, 2.1, 3.1])\n",
    "        expected_mse = 0.01\n",
    "        self.assertAlmostEqual(compute_mse(y_true, y_pred), expected_mse, places=6)\n",
    "\n",
    "    def test_within_threshold_pass(self):\n",
    "        \"\"\"\n",
    "        Test that is_within_threshold returns True when the difference\n",
    "        between the test value and the ideal value is less than or equal\n",
    "        to the maximum allowed deviation (max_dev).\n",
    "        \"\"\"\n",
    "        y_test = 5.0\n",
    "        y_ideal = 5.3\n",
    "        max_dev = 0.3  # Allowed threshold: ~0.3\n",
    "        self.assertTrue(is_within_threshold(y_test, y_ideal, max_dev))\n",
    "\n",
    "    def test_within_threshold_fail(self):\n",
    "        \"\"\"\n",
    "        Test that is_within_threshold returns False when the difference\n",
    "        between the test value and the ideal value exceeds max_dev.\n",
    "        \"\"\"\n",
    "        y_test = 5.0\n",
    "        y_ideal = 5.6\n",
    "        max_dev = 0.3\n",
    "        self.assertFalse(is_within_threshold(y_test, y_ideal, max_dev))\n",
    "\n",
    "    def test_find_best_ideal(self):\n",
    "        \"\"\"\n",
    "        Test that find_best_ideal selects the ideal array with the lowest\n",
    "        Mean Squared Error when compared with the training data.\n",
    "        \"\"\"\n",
    "        train_y = np.array([1.0, 2.0, 3.0])\n",
    "        ideal_1 = np.array([1.1, 2.1, 3.1])  # MSE ~ 0.01\n",
    "        ideal_2 = np.array([2.0, 3.0, 4.0])  # MSE ~ 1.0\n",
    "        best = find_best_ideal(train_y, [ideal_1, ideal_2])\n",
    "        np.testing.assert_array_equal(best, ideal_1)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    unittest.main(argv=[''], exit=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b03c4cc-34e6-4701-9e2e-8b27a5ed10bd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
